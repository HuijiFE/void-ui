/*----------  定义常量  ----------*/

$const-genres: 'lite', 'dark';
$const-toggle-shapes: 'circle', 'rect';
$const-toggle-positions: 'left', 'right';

/*----------  定义变量  ----------*/

$toggle-margin: 0.16rem;
$toggle-gutter: 0.04rem;
$toggle-background-color: (
  lite: #ccc,
  dark: #888
);

$toggle-inner-background: (
  lite: $lite-background-card,
  dark: $dark-background-card
);
$toggle-outer-border: (
  rect: 1px solid transparent,
  circle: 0
);
$toggle-outer-border-radius: (
  rect: $border-radius-base,
  circle: 0.08rem
);
$toggle-inner-border-radius: (
  rect: $border-radius-base,
  circle: 0.06rem
);
$toggle-outer-sizes: (
  rect: 0.14rem,
  circle: 0.16rem
);
$toggle-outer-width: (
  rect: 0.28rem,
  circle: 0.32rem
);
$toggle-outer-height: (
  rect: 0.14rem,
  circle: 0.16rem
);
$toggle-inner-width: (
  rect: 0.14rem,
  circle: 0.12rem
);
$toggle-inner-height: (
  rect: 0.1rem,
  circle: 0.12rem
);
/*----------  定义动画  ----------*/
$transition-duration-base: 0.2s;
$transition-timing-function-base: ease-in-out;
$transition-base: all $transition-duration-base $transition-timing-function-base;
@mixin hardware-acceleration() {
  transform: translate3d(0, 0, 0);
}
@mixin gen-transition-base($properties) {
  transition-property: $properties;
  transition-duration: $transition-duration-base;
  transition-timing-function: $transition-timing-function-base;
}

/*----------  定义mixins  ----------*/
@mixin flex-row($justify: flex-start, $align: stretch, $wrap: nowrap) {
  @include flex(row, $justify, $align, $wrap);
}
@mixin flex-reverse($justify: flex-start, $align: stretch, $wrap: nowrap) {
  @include flex (row-reverse, $justify, $align, $wrap);
}

/*----------  组件代码  ----------*/
.#{$void}-toggle {
  cursor: pointer;
  user-select: none;
  font-size: 0.12rem;
  &.position {
    @each $position in $const-toggle-shapes {
      &-#{$position} {
        @if $position==left {
          @include flex-reverse(flex-start, center);
        } @else {
          @include flex-row(flex-start, center);
        }
        display: inline-flex;
      }
    }
  }
  &.genre {
    @each $genre in $const-genres {
      &-#{$genre} {
        .outer {
          background-color: map-get(
            $map: $toggle-background-color,
            $key: $genre
          ); // border-color: map-get($map: $toggle-background-color, $key: $genre);
          @include gen-transition-base((background-color, border-color));
          &::after {
            background-color: map-get($map: $toggle-inner-background, $key: $genre);
            content: '';
            position: absolute;
            top: 2px;
            cursor: pointer;
            @include gen-transition-base((left, width));
          }
        }
      }
    }
  }
  @each $shape in left, right {
    &.shape-#{$shape} {
      border: map-get($map: $toggle-outer-border, $key: #{$shape});
      .outer {
        height: map-get($map: $toggle-outer-height, $key: #{$shape});
        width: map-get($map: $toggle-outer-width, $key: #{$shape});
        line-height: map-get($map: $toggle-outer-height, $key: #{$shape});
        border-radius: map-get($map: $toggle-outer-border-radius, $key: #{$shape});
        position: relative;
      }
    }
  }
  .vd-input {
    display: none;
  }
  @each $shape in left, right {
    &.shape-#{$shape} {
      .outer::after {
        width: map-get($map: $toggle-inner-width, $key: #{$shape});
        height: map-get($map: $toggle-inner-height, $key: #{$shape});
        border-radius: map-get($map: $toggle-inner-border-radius, $key: #{$shape});
        left: 2px;
      }
    }
  }
  &:focus {
    outline: 0;
  }
  &:focus:hover {
    box-shadow: none;
  }
  &.checked {
    @each $shape in $left, right {
      &.shape-#{$shape} {
        .outer {
          border-color: $color-primary;
          background-color: $color-primary;
          &::after {
            left: map-get($map: $toggle-outer-width, $key: #{$shape}) -
              map-get($map: $toggle-inner-width, $key: #{$shape}) - 0.02rem;
          }
        }
      }
    }
  }
  &.disabled {
    @each $genre in $const-genres {
      &.genre-#{$genre} {
        .outer {
          border-color: map-get($map: $genre-background-hover, $key: $genre);
          background-color: map-get($map: $genre-background-hover, $key: $genre);
          &::after {
            background-color: map-get($map: $genre-background-card, $key: $genre);
          }
        }
      }
    }
  }

  .content {
    @include clear-baseline();
    font-size: $font-size-medium;
  }
  .outer {
    @each $position in $const-toggle-positions {
      &.#{$position} {
        margin-#{$position}: $toggle-gutter;
      }
    }
  }
  & + & {
    margin-left: $toggle-margin;
  }
}
