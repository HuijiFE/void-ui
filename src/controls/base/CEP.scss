/**
 * CEP
 * The css class naming rule based on component, something like BEM.
 */

/* ----------  Component  ---------- */

@function class-comp($component) {
  @if $component != to-lower-case($component) {
    @error 'Must use lower case class name for a component. "#{$component}"';
  }
  @return '#{$namespace}-#{$component}';
}

/**
 * Generate root selector for a component/control.
 * 
 * @include comp('button') {}
 * 
 * .vd-button {}
 */
@mixin comp($component) {
  $C: class-comp($component) !global;

  .#{$C} {
    @content;
  }
}

/* ----------  Element  ---------- */

@function class-elem($element) {
  @return '#{$C}_#{$element}';
}

/**
 * Generate selector for elements, support multi elements.
 * 
 * @include comp('button') {
 *   @include elem('icon') {}
 * }
 * 
 * .vd-button {
 *   .vd-button_icon {}
 * }
 */
@mixin elem($element-list...) {
  $selector: &;

  @each $element in $element-list {
    $elements-selector: '.#{class-elem($element)}';

    @at-root {
      #{$selector} {
        #{$elements-selector} {
          @content;
        }
      }
    }
  }
}

/**
 * Generate adjacent sibling combinator for elements.
 * 
 * @include comp('list') {
 *   @include elem-adjacent('item') {}
 * }
 * 
 * .vd-list {
 *   .vd-list_item + .vd-list_item {}
 * }
 */
@mixin elem-adjacent($element-former, $element-target: null) {
  @if $element-target == null {
    $element-target: $element-former;
  }
  $selector: &;

  @at-root {
    #{$selector} {
      .#{class-elem($element-former)} + .#{class-elem($element-target)} {
        @content;
      }
    }
  }
}

/**
 * Generate general sibling combinator for elements.
 * 
 * @include comp('list') {
 *   @include elem-general('item') {}
 * }
 * 
 * .vd-list {
 *   .vd-list_item ~ .vd-list_item {}
 * }
 */
@mixin elem-general($element-former, $element-target: null) {
  @if $element-target == null {
    $element-target: $element-former;
  }
  $selector: &;

  @at-root {
    #{$selector} {
      .#{class-elem($element-former)} ~ .#{class-elem($element-target)} {
        @content;
      }
    }
  }
}

/* ----------  Property  ---------- */

@function class-prop($property, $value) {
  @return '#{$namespace}p-#{$property}_#{$value}';
}

/**
 * Generate selector for properties of a component/control.
 * 
 * @include comp('button') {
 *   @include prop(( skin: 'plain', theme: 'dark', )) {}
 * }
 * 
 * .vd-button.vdp-skin-plain.vdp-theme-dark {}
 * 
 * NOTE: The prop mixin is only for components, not for elements
 */
@mixin prop($property-map-list...) {
  @each $property-map in $property-map-list {
    $props-selector: '';
    @each $property, $value in $property-map {
      $props-selector: '#{$props-selector}.#{class-prop($property, $value)}';
    }

    @at-root {
      .#{$C}#{$props-selector} {
        @content;
      }
    }
  }
}

/* ----------  Status  ---------- */

@function class-status($status) {
  @return 'is-#{$status}';
}

/**
 * Generate selector for boolean properties of a component/control.
 * 
 * @include comp('menu-item') {
 *   @include when('selected') {}
 * }
 * 
 * .menu-item.is-selected {}
 * 
 * ----
 * 
 * @include comp('list') {
 *   @include elem('item') {
 *     @include when('selected', 'raised') {}
 *   }
 * }
 * 
 * .vd-list {
 *   .vd-list_item.is-selected.is-raised {}
 * }
 */
@mixin when($status) {
  $selector: &;

  @at-root {
    #{$selector}.#{class-status($status)} {
      @content;
    }
  }
}

@mixin when-and($status-list...) {
  $status-selector: &;
  @each $status in $status-list {
    $status-selector: '#{$status-selector}.#{class-status($status)}';
  }

  @at-root {
    #{$status-selector} {
      @content;
    }
  }
}

@mixin when-or($status-list...) {
  $selector: &;
  $status-selector: '';
  @each $status in $status-list {
    $status-selector: '#{$selector}.#{class-status($status)}';

    @at-root {
      #{$status-selector} {
        @content;
      }
    }
  }
}

/* ----------  Atomic  ---------- */

@function class-atom($name, $value: null) {
  $class-name: '#{$namespace}a-#{$name}';
  @if $value != null {
    $class-name: '#{$class-name}_#{$value}';
  }
  @return $class-name;
}

// Define a atomic rule.
@mixin define-atom($name, $value: null) {
  $class-name: class-atom($name, $value);
  @at-root {
    .#{$class-name},
    %#{$class-name} {
      @content;
    }
  }
}
// Extend a atomic rule.
@mixin extend-atom($name, $value: null) {
  @extend .#{class-atom($name, $value)};
}
// Define a abstract atomic rule.
@mixin abstract-atom($name, $value: null) {
  @at-root {
    %#{class-atom($name, $value)} {
      @content;
    }
  }
}
// Inherit a atomic rule.
@mixin inherit-atom($name, $value: null) {
  @extend %#{class-atom($name, $value)};
}
