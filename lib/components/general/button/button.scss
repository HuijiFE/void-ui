/**
 * Component: Button
 */
@include comp('button') {
  position: relative;
  display: inline-flex;
  flex-wrap: nowrap;
  justify-content: center;
  align-content: center;
  align-items: center;
  vertical-align: middle;

  text-decoration: none;
  user-select: none;
  font-weight: normal;
  line-height: 1;
  white-space: nowrap;

  padding: 0;
  margin: 0;

  color: inherit;
  background-color: transparent;
  border: rem($border-base) solid transparent;

  cursor: pointer;

  // --------------------------------
  // STYLE shape & size

  @each $size, $value in $button-font-size-map {
    @include prop(
      (
        'size': $size,
      )
    ) {
      font-size: rem($value);
    }
  }

  // rect square
  @include prop(
    (
      'shape': 'rect',
    ),
    (
      'shape': 'square',
    )
  ) {
    border-radius: rem($radius-base);
  }

  @include prop(
    (
      'shape': 'circle',
    )
  ) {
    border-radius: 50%;
  }

  @each $size, $height in $button-size-map {
    @include prop(
      (
        'size': $size,
        'shape': 'pill',
      )
    ) {
      border-radius: rem($height / 2);
    }

    @include prop(
      (
        'size': $size,
      )
    ) {
      height: rem($height);
    }

    // rect, pill
    @include prop(
      (
        'size': $size,
        'shape': 'rect',
      ),
      (
        'size': $size,
        'shape': 'pill',
      )
    ) {
      min-width: rem($height * $button-min-width-multiple);
      padding: 0 rem($height * $button-padding-multiple);
    }

    // square, circle
    @include prop(
      (
        'size': $size,
        'shape': 'square',
      ),
      (
        'size': $size,
        'shape': 'circle',
      )
    ) {
      width: rem($height);
    }
  }

  // ----------------------------
  // STYLE skin & tone & theme

  // fill

  @include prop(
    (
      'skin': 'fill',
    )
  ) {
    color: $color-white;
  }

  @each $tone in $type-tone {
    @include prop(
      (
        'skin': 'fill',
        'tone': $tone,
      )
    ) {
      background-color: tone($tone);

      &:hover,
      &:focus {
        background-color: tone($tone, 'lighten');
      }
      &:active {
        background-color: tone($tone, 'darken');
      }
    }
  }

  // flat & plain & silk

  @each $theme in $type-theme {
    @include prop(
      (
        'skin': 'flat',
        'theme': $theme,
      ),
      (
        'skin': 'plain',
        'theme': $theme,
      )
    ) {
      background-color: theme($theme, 'bg');

      &:hover,
      &:focus {
        background-color: theme($theme, 'bg', 'higher');
      }
      &:active {
        background-color: theme($theme, 'bg', 'lower');
      }
    }
  }

  @each $tone in $type-tone {
    @include prop(
      (
        'skin': 'flat',
        'tone': $tone,
      ),
      (
        'skin': 'plain',
        'tone': $tone,
      ),
      (
        'skin': 'silk',
        'tone': $tone,
      )
    ) {
      color: tone($tone);
    }
    @include prop(
      (
        'skin': 'plain',
        'tone': $tone,
      ),
      (
        'skin': 'silk',
        'tone': $tone,
      )
    ) {
      border-color: tone($tone);
    }

    @include prop(
      (
        'skin': 'plain',
        'tone': $tone,
      ),
      (
        'skin': 'silk',
        'tone': $tone,
      )
    ) {
      &:hover,
      &:focus {
        color: tone($tone, 'lighten');
        border-color: tone($tone, 'lighten');
      }
      &:active {
        color: tone($tone, 'darken');
        border-color: tone($tone, 'darken');
      }
    }
  }

  // ----------------------------
  // STYLE disabled

  @include when('disabled') {
    cursor: not-allowed;
  }

  @each $theme in $type-theme {
    @include prop(
      (
        'theme': $theme,
        'skin': 'fill',
      ),
      (
        'theme': $theme,
        'skin': 'flat',
      ),
      (
        'theme': $theme,
        'skin': 'plain',
      ),
      (
        'theme': $theme,
        'skin': 'silk',
      )
    ) {
      @include when('disabled') {
        &,
        &:hover,
        &:focus,
        &:active {
          color: theme($theme, 'fg', 'disabled');
        }
      }
    }

    @include prop(
      (
        'theme': $theme,
        'skin': 'fill',
      )
    ) {
      @include when('disabled') {
        &,
        &:hover,
        &:focus,
        &:active {
          background-color: theme($theme, 'bg', 'disabled');
        }
      }
    }

    @include prop(
      (
        'theme': $theme,
        'skin': 'flat',
      ),
      (
        'theme': $theme,
        'skin': 'plain',
      )
    ) {
      @include when('disabled') {
        &,
        &:hover,
        &:focus,
        &:active {
          background-color: theme($theme, 'bg', 'normal');
        }
      }
    }

    @include prop(
      (
        'theme': $theme,
        'skin': 'plain',
      ),
      (
        'theme': $theme,
        'skin': 'silk',
      )
    ) {
      @include when('disabled') {
        &,
        &:hover,
        &:focus,
        &:active {
          border-color: theme($theme, 'bd', 'disabled');
        }
      }
    }
  }

  // ----------------------------
  // STYLE loading

  @include when('loading') {
    cursor: wait;
  }

  // ----------------------------
  // transition

  transition: ease-in-out 0.2s;
  transition-property: color, background-color, border-color, box-shadow;

  // ----------------------------
  // slots

  @include elem-adjacent('loading', 'content') {
    margin-left: $button-gap-icon-text;
  }
  @include elem-adjacent('left', 'content') {
    margin-left: $button-gap-icon-text;
  }
  @include elem-adjacent('content', 'right') {
    margin-left: $button-gap-icon-text;
  }

  @include elem('loading', 'left', 'right') {
    width: 1em;
  }

  @include elem('loading-indicator') {
    display: inline-block;
    width: 1em;
    height: 1em;
    line-height: 1;
    vertical-align: middle;
    border-radius: 50%;
    border: rem(2) solid transparent;
    border-right-color: currentColor;
    border-bottom-color: currentColor;

    @keyframes vd-button-loading-indicator-spin {
      from {
        transform: rotate(0);
      }
      to {
        transform: rotate(360deg);
      }
    }
    animation: vd-button-loading-indicator-spin 750ms linear infinite;
  }
}

/**
 * Component: ButtonGroup
 */
@include comp('button-group') {
  margin: rem(-$gap-base);
  padding: rem($gap-base / 2);

  > .#{class-comp('button')} {
    margin: rem($gap-base / 2);
  }
}
