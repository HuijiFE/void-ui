/**
 * Component: Tabs
 */

$vd-tabs_transition-duration: 300ms !default;
$vd-tabs_transition-distance: 64 !default;

@include comp('tabs') {
  position: relative;
  flex: 1;

  overflow: hidden;

  @include elem('header', 'header-item', 'separator', 'body', 'container', 'wrapper') {
    position: relative;
  }

  @include elem('header-item', 'indicator', 'wrapper') {
    transition-timing-function: ease-in-out;
    transition-duration: $vd-tabs_transition-duration;
  }

  @include elem('header') {
    width: 100%;
    height: rem($card-header-height-base);
    padding: 0 rem($gap-base);

    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-content: stretch;
    align-items: stretch;
  }

  @include elem('header-item') {
    cursor: pointer;

    height: 100%;
    flex: none;
    padding: 0 rem($gap-base);
    margin: 0;
    border: none;

    color: inherit;
    background: transparent;

    @include when('selected') {
      color: tone();
    }

    transition-property: color;
  }

  @include elem('indicator') {
    position: absolute;
    left: 0;
    bottom: rem(-1);
    width: 0;
    height: rem(2);

    background-color: tone();

    transition-property: left, width;
  }

  @include elem('separator') {
    width: 100%;
    height: 0;
    border-bottom: rem($border-base) solid transparent;
  }

  @include elem('body') {
    padding: rem($gap-base);
  }

  @include elem('container') {
    width: 100%;
    overflow: hidden;
  }

  @include elem('wrapper') {
    width: 100%;

    > * {
      display: none;
    }

    @include elem('pane') {
      @include when('selected') {
        display: block;
      }
    }
  }

  @include elem('pane') {
    width: 100%;
    overflow: hidden;
    transform: translate3d(0, 0, 0);

    @each $direction in 'left', 'right' {
      @each $state in 'in', 'out' {
        @keyframes '#{class-comp('tab-pane')}-#{$direction}-#{$state}' {
          from {
            display: block;
            opacity: if($state == 'in', 0, 1);
            transform: if(
              $state == 'in',
              translateX(
                rem($vd-tabs_transition-distance) * if($direction == 'left', -1, 1)
              ),
              translateX(0)
            );
          }
          to {
            display: block;
            opacity: if($state == 'in', 1, 0);
            transform: if(
              $state == 'in',
              translateX(0),
              translateX(
                rem($vd-tabs_transition-distance) * if($direction == 'left', -1, 1)
              )
            );
          }
        }
      }
    }

    @each $transition in 'left-in', 'left-out', 'right-in', 'right-out' {
      @include when($transition) {
        animation: vd-tab-pane-#{$transition} $vd-tabs_transition-duration ease-out forwards;
      }
    }
  }

  @each $theme in $type-theme {
    @include prop(
      (
        'theme': $theme,
      )
    ) {
      color: theme($theme);
      background-color: theme($theme, 'bg');

      @include when('bordered') {
        border: rem($border-base) solid theme($theme, 'bd');
      }

      @include elem('separator') {
        border-color: theme($theme, 'bd');
      }
    }
  }

  @include when('raise') {
    box-shadow: raise-shadow();
  }
}
